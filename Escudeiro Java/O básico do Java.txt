1.
A Sun Microsystems no desenvolvimento do projeto *7 um controle universal possibilitando a interação 
de diversos sistemas, automação residencial, controle de eletrodomesticos, video sob demanda e etc. 
Para isso era necessário uma linguagem muito mais portável que o C++ inicial, onde embora fosse possível 
era extremamente laborioso e lento.  Foi necessário resolver o problema criando uma lingua com essa 
portabilidade, essa lingua foi GreenTalk que mais tarde se tornou Oak e depois Java. 
O sistema era revolucionário e a visão da equipe, automação residencial, vídeo sob demanda e 
unificação de sistemas é uma realidade hoje, mas ideia não vendeu. 
Restou então a linguagem que fez enorme sucesso justamente por sua portabilidade. 
	Java tem como princípios: 
	Ser simples, orientada a objetos e familiar.
	Ser robusta e segura.		
	Ser portável e de arquitetura neutra.
	Ser de alta performance.
	Ser interpretada, dinâmica e ter suporte a encadeamento de execução (Thread).
Java se consolidou como uma das linguagens mais importantes do mundo, por sua portabilidade e segurança, 
milhões de desenvolvedores a utilizam e bilhões de dispositivos dependem dela em algum nível. 

---------------------------------------------------------------------------------------------------------

2.
JDK - Java Development Kit (Kit de Desenvolvimento Java), é um conjunto de 
ferramentas de desenvolvimento que contém tanto as ferramentas de desenvolvimento
quanto a JRE.

JRE - Java Runtime Environment (Ambiente de Tempo de Execução Java),
é utilizado para executar as aplicações da plataforma Java. Composto 
bibliotecas (APIs), compiladores e pela Máquina virtual Java (JVM). 
É utilizada toda a vez que um programa java vai ser executado.

JVM - Java Virtual Machine (Máquina virtual Java), é a estrutura 
responsável por rodar o byte-code gerado no momento da compilação, 
faz a comunicação entre o código e o sistema operacional de destino.
É a parte responsável pela portabilidade de Java, uma vez que o código
compilado em byte code pode rodar na JVM de qualquer SO. 

Exemplificando: Um programador utiliza uma IDE ou um editor de textos para 
criar um código que será salvo no formato .java, esse arquivo é compilado 
em byte code pelo javac presente no pacote da JDK para um arquivo no formato 
.class ou .jar no momento da execução a JVM utiliza outros arquivos, bibliotecas
e classes vindos da JRE... Para o usuário a JRE que já vem com a JVM provê tudo 
o que for necessário para rodar programas escritos em Java e a JDK é voltada 
para a criação e compilação desses programas.

---------------------------------------------------------------------------------------------------------

3.
O que você precisou para resolver esta questão;
r: Editor de textos, terminal do Windows e compilador javac que vem com a JDK.

O comando que você usou para compilar;
r: >javac HelloWorld.java

O comando que você usou para executar;
r: >java HelloWorld

Qual é a estrutura miníma de uma classe Java;
r: <modificador de acesso> <definição de tipo> <nome da classe> <corpo da classe entre colchetes {}>
exemplo: public class NomeDaClasse{ // métodos, construtores, etc}

O que é o método main e qual a sua importância;
r: É o ponto de entrada de uma aplicação java, a JVM procura esse método para iniciar a aplicação.
Sem ele existem poucas formas de se iniciar um programa sem causar um erro de compilação se não estiver presente
ou de Runtime se for declarado após um bloco estático válido.
exemplo: public static void main(String[] args){}

O que é e em que momento da resolução da questão foi gerado o BYTECODE;
r: O BYTECODE é gerado no momento da compilação. É um tipo intermediário de código entre o código. 
A portabilidade da linguagem se dá pelo fato de que em qualquer sistema que tenha a sua versão da JVM 
o BYTECODE pode gerar o programa desejado.

---------------------------------------------------------------------------------------------------------

4.
Garbage Collectors são algoritmos de desalocação de memória, a MV controla a alocação de memória que
o programa vai utilizar. Quando um método que utiliza um objeto é finalizado, ocorre uma exceção ou 
o número de referências a um determinado objeto cai a zero, esse objeto é passível de ser coletado pelo 
Garbage Collector que varre a pilha de execução para encontrar os objetos sem referência e devolver o 
endereço de memória aos endereços disponiveis do heap de memória. 

Exemplo de erro de OutOfMemoryError:

public class Test {
    public static void main(String args[]) throws Exception {
        Integer[] array = new Integer[100000 * 100000];
    }
}

Para evitar esse tipo de erro seria necessário um heap maior configurando -Xmx da jvm ou uma melhor 
estruturação do programa.